#include "drivers/mss_gpio/mss_gpio.h"
#include "drivers/mss_timer/mss_timer.h"
#include "drivers/mss_uart/mss_uart.h"

#include <stdio.h>
#include <inttypes.h>

#include "imu.h"

#define CONTROLLER_ADDR 0x40050000
#define SERVO_LEFT_ADDR 0x40050100
#define SERVO_RIGHT_ADDR 0x40050200

#define NUMBER_SAMPLES 10

/*
 * Interrupt-driven data receive
 */
#define RX_BUFF_SIZE 4

uint8_t g_rx_buff[RX_BUFF_SIZE];
uint32_t g_buttons;

void uart1_rx_handler( mss_uart_instance_t * this_uart )
{
	size_t rx_size = MSS_UART_get_rx( this_uart, g_rx_buff, sizeof(g_rx_buff));
	if (rx_size > 0){
//		Correct bad joystick values
		if (g_rx_buff[0] > 25 && g_rx_buff[1] > 25)
		{
			g_buttons = g_rx_buff[3];
			g_buttons = ((g_buttons << 8) | g_rx_buff[2]);
			g_buttons = ((g_buttons << 8) | g_rx_buff[1]);
			g_buttons = ((g_buttons << 8) | g_rx_buff[0]);
			//printButtons(g_buttons);
			//printf("KP: %f\r\n KD: %f\r\nKI:%f\r\n", KP, KD, KI);
			//printf("OTHER STUFF: %d\r\n", g_buttons);
		}
	}
}

/*
 * Controller parameters
 */
#define DT 0.0001
#define K 100000
float KP = .05;
float KD = .1;
float KI = .01;
//10,10
/*
 * Variables output from control algorithm
 */
float ANGLE = 0;
float SPEED = 0;



/*
 * Variables input to control algorithm
 */
int16_t X_GYRO;
int16_t Y_ACCL;

/*
 * Controls motor enable
 */
uint8_t MOTOR_ENABLE = 1;

float gyro_average( void )
{
	int i;

	static int16_t gyro_avgs[NUMBER_SAMPLES];
	static int index_gyro = 0;

	gyro_avgs[index_gyro] = X_GYRO;

	index_gyro++;
	if (index_gyro >= NUMBER_SAMPLES) index_gyro = 0;

	int32_t total_gyro = 0;
	for (i = 0; i < NUMBER_SAMPLES; ++i) {
		total_gyro += gyro_avgs[i];
	}
	float gyro_avg = total_gyro / NUMBER_SAMPLES;

	return gyro_avg;
}

float accl_average( void)
{
	int i;

	static int16_t accl_avgs[NUMBER_SAMPLES];
	static int index_accl = 0;

	accl_avgs[index_accl] = Y_ACCL;

	index_accl++;
	if (index_accl >= NUMBER_SAMPLES) index_accl = 0;

	int32_t total_accl = 0;
	for (i = 0; i < NUMBER_SAMPLES; ++i) {
		total_accl += accl_avgs[i];
	}
	float accl_avg = total_accl / NUMBER_SAMPLES;

	return accl_avg;
}

void Timer1_IRQHandler( void )
{
	float rate = (X_GYRO ) / 131;
	float accl_angle = (Y_ACCL * 90) / 16384;

	//combine accelerometer and gyroscope
	ANGLE = ((0.98) * (ANGLE + rate * DT) + (0.02) * accl_angle);

//	static uint32_t count = 0;
//	if (count >= 50) {
//		float accl_avg = (accl_average() * 90) / 16384;
//		if (ANGLE < 1 && ANGLE > -1 && accl_avg < 1 && accl_avg > -1) {
//			X_GYRO_OFFSET = X_GYRO;
//			Y_ACCL_OFFSET = Y_ACCL;
//		}
//	}

	//printf("angle: %f\r\n", ANGLE);
	//printf("%f\r\n", rate);

	//controller
	SPEED -= ANGLE * KP + rate * KD + ANGLE * DT  * KI;


	//scale speed
	//SPEED /= 2;


	//make bounds
	if (ANGLE < 2 && ANGLE > -2)
		SPEED = 0;
//	else if (ANGLE > 0 || ANGLE < -70)
//		SPEED = 0;
	else if (SPEED > 10000)
		SPEED = 10000;
	else if (SPEED < -10000)
		SPEED = -10000;

	MSS_TIM1_clear_irq();
}

/*
 * IRQ handler for disabling/enabling the motors
 */
void Fabric_IRQHandler( void )
{
	if (MOTOR_ENABLE)
		MOTOR_ENABLE = 0;
	else
		MOTOR_ENABLE = 1;
}

union
{
	float f;
	char c[4];
}g_ki, g_kd, g_kp, g_angle;

int main() {
	MSS_GPIO_init();
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE);
	MSS_GPIO_config( MSS_GPIO_1, MSS_GPIO_OUTPUT_MODE);
	MSS_I2C_init(&g_mss_i2c1 , IMU_ADDRESS_WRITE, MSS_I2C_PCLK_DIV_256 );
	imu_init();

	//one timer tick is 10ns at 100Mhz

	MSS_TIM1_init( MSS_TIMER_PERIODIC_MODE);
	MSS_TIM1_enable_irq();
	MSS_TIM1_load_background(10000);
	MSS_TIM1_start();
	MSS_GPIO_set_output(MSS_GPIO_1, 1);

	NVIC_EnableIRQ(Fabric_IRQn);

	X_ACCL_OFFSET = 485;
	X_GYRO_OFFSET = 475;
	Y_ACCL_OFFSET = -650;

	MSS_UART_init
	(
		&g_mss_uart1,
		MSS_UART_9600_BAUD,
		(MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT)
	);

	MSS_UART_set_rx_handler
	(
		&g_mss_uart1,
		uart1_rx_handler,
		MSS_UART_FIFO_FOUR_BYTES
	);

	int i = 1;

	printf("Beginning Segway!\n\r");

	while( 1 ) {
	    X_GYRO = imu_gyro_x();
	    Y_ACCL = imu_accl_y();

		//150000 = 1.5ms pulse
		//1.49ms pulse = equilibrium point

		uint32_t volatile *servo_left = (uint32_t *) SERVO_LEFT_ADDR;
		uint32_t volatile *servo_right = (uint32_t *) SERVO_RIGHT_ADDR;

		if (MOTOR_ENABLE) {
			*servo_right = 150000 + SPEED;
			*servo_left = 150000 - SPEED;
			MSS_GPIO_set_output(MSS_GPIO_0, 0);
		} else {
			*servo_right = 150000;
			*servo_left = 150000;
			MSS_GPIO_set_output(MSS_GPIO_0, 1);
		}

		uint32_t oldbuttons = g_buttons;

		// Get controller info
		uint8_t tx_buff[14];
		if(!(i%100)){
//			uint32_t test = 42;
//			tx_buff[0] = test;			// Break up buttons into 4x 8 bit chunks
//			tx_buff[1] = (test >> 8);
//			tx_buff[2] = (test >> 16);
//			tx_buff[3] = (test >> 24);

			g_angle.f = ANGLE;
			g_kp.f = KP;
			g_ki.f = KI;
			g_kd.f = KD;

//			tx_buff[0] = g_angle.c[0];
//			tx_buff[1] = g_angle.c[1];
//			tx_buff[2] = g_angle.c[2];
//			tx_buff[3] = g_angle.c[3];

			tx_buff[4] = g_kp.c[0];
			tx_buff[5] = g_kp.c[1];
			tx_buff[6] = g_kp.c[2];
			tx_buff[7] = g_kp.c[3];

			tx_buff[8] = g_ki.c[0];
			tx_buff[9] = g_ki.c[1];
			tx_buff[10] = g_ki.c[2];
			tx_buff[11] = g_ki.c[3];

			tx_buff[0] = g_kd.c[0];
			tx_buff[1] = g_kd.c[1];
			tx_buff[2] = g_kd.c[2];
			tx_buff[3] = g_kd.c[3];

			//fix up remaining space
			tx_buff[12] = 0;
			tx_buff[13] = 0;

			MSS_UART_irq_tx( &g_mss_uart1, tx_buff, sizeof(tx_buff));
			while ( 0 == MSS_UART_tx_complete( &g_mss_uart1 ) )
			 {
				 ;
			 }

			i = 1;

		}
		i++;



		if (getA(g_buttons)==1 && getA(oldbuttons) == 0)
		{
			KP *= 10;
		}
		if (getB(g_buttons)==1 && getB(oldbuttons) == 0)
		{
			KP /= 10;
		}

		if (getY(g_buttons)==1 && getY(oldbuttons) == 0)
		{
			KD *= 10;
		}
		if (getX(g_buttons)==1 && getX(oldbuttons) == 0)
		{
			KD /= 10;
		}

		if (getR(g_buttons)==1 && getR(oldbuttons) == 0)
		{
			KI *= 10;
		}
		if (getL(g_buttons)==1 && getL(oldbuttons) == 0)
		{
			KI /= 10;
		}
	}

	return 0;
}
